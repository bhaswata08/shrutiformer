2024-04-12 00:38:10,412 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 00:38:10,417 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 00:38:10,418 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 00:38:10,436 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:38:10,442 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 00:38:10,505 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a7333e610>
2024-04-12 00:38:10,505 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x766a7330ca70> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 00:38:10,516 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a73963b50>
2024-04-12 00:38:10,517 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:38:10,517 - DEBUG - send_request_headers.complete
2024-04-12 00:38:10,517 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:38:10,517 - DEBUG - send_request_body.complete
2024-04-12 00:38:10,517 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:38:11,970 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 00:38:12,465 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:38:17,775 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:08:17 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=YiX3AmuLxn2sIsdms8LI7VXuzSlBQp1mTGFI8iZR66IvcQBCIk62t9UcvcywW%2FJnMeW2BfFVnpQzXSJH3ge5Rd0amSALW4OAHyXBgAyu37W3pzFcNTdBuOiKsagWRSCfs6LZLZ0u26VA"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d4385cd711d8d-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:38:17,776 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 00:38:17,776 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:38:17,776 - DEBUG - receive_response_body.complete
2024-04-12 00:38:17,776 - DEBUG - response_closed.started
2024-04-12 00:38:17,776 - DEBUG - response_closed.complete
2024-04-12 00:38:17,776 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 00:38:17,777 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 00:38:17,777 - DEBUG - Retrying due to status code 500
2024-04-12 00:38:17,777 - DEBUG - 1 retry left
2024-04-12 00:38:17,777 - INFO - Retrying request to /chat/completions in 0.882458 seconds
2024-04-12 00:38:18,660 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:38:18,661 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:38:18,661 - DEBUG - send_request_headers.complete
2024-04-12 00:38:18,661 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:38:18,661 - DEBUG - send_request_body.complete
2024-04-12 00:38:18,661 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:38:24,237 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:08:24 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=4x%2BbV7OsGksyIHVkQBkh53Ms83ibZNRr6SN3cC7vpR1e8olwtP284eqLbM0nrQV0g2RnCsHbWBWyqCFS8xTAZDvLlz4SvZRhW9aV2xwE%2BZZI0%2F1kXvo371FyrS57yh%2BtMZcHYP6T7cw4"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d43b8bb191d8d-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:38:24,237 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 00:38:24,237 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:38:24,237 - DEBUG - receive_response_body.complete
2024-04-12 00:38:24,237 - DEBUG - response_closed.started
2024-04-12 00:38:24,238 - DEBUG - response_closed.complete
2024-04-12 00:38:24,238 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 00:38:24,238 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 00:38:24,239 - DEBUG - Retrying due to status code 500
2024-04-12 00:38:24,239 - DEBUG - 0 retries left
2024-04-12 00:38:24,239 - INFO - Retrying request to /chat/completions in 1.639062 seconds
2024-04-12 00:38:25,878 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:38:25,880 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:38:25,880 - DEBUG - send_request_headers.complete
2024-04-12 00:38:25,880 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:38:25,880 - DEBUG - send_request_body.complete
2024-04-12 00:38:25,881 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:38:31,885 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:08:31 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=yL6%2BDYTM0uQKoN3KLzTczMVsnaAiDfgv5e4O3CJxOMpGiPsSUQTgctnQz60WTxnrwGjzLv%2BFz6qAN1j3cLIIe3r3fMCDQg2wkv3wo5SbGTebgRb2A9I6qjQ1UEgvn1LvxRiPTtaguByu"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d43e5ce661d8d-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:38:31,886 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 00:38:31,886 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:38:31,886 - DEBUG - receive_response_body.complete
2024-04-12 00:38:31,886 - DEBUG - response_closed.started
2024-04-12 00:38:31,886 - DEBUG - response_closed.complete
2024-04-12 00:38:31,886 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 00:38:31,886 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 00:38:31,887 - DEBUG - Re-raising status error
2024-04-12 00:38:32,545 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:38:36,341 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 00:38:36,341 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 00:38:36,359 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:38:36,359 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 00:38:36,868 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:38:37,557 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a73357810>
2024-04-12 00:38:37,557 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x766a728bc680> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 00:38:37,569 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a73356fd0>
2024-04-12 00:38:37,570 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:38:37,570 - DEBUG - send_request_headers.complete
2024-04-12 00:38:37,570 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:38:37,570 - DEBUG - send_request_body.complete
2024-04-12 00:38:37,570 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:38:52,907 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:08:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=JvWIYR%2BauOQmB7l%2FbWCsuwMRomp5%2BpnYmI9L3JKnommBFl8u5blvq2QaV3Ya4ViNrSoQ%2FqYmENeVplSH5nDhZNf7PnEhg%2BigPDwBPCoOwBCpTZHN1OhrLURtReA%2FlnY%2FUIetLE7yb745"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d442edfc71d3d-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:38:52,907 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 00:38:52,908 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:38:52,908 - DEBUG - receive_response_body.complete
2024-04-12 00:38:52,908 - DEBUG - response_closed.started
2024-04-12 00:38:52,908 - DEBUG - response_closed.complete
2024-04-12 00:38:52,908 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 00:38:53,344 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:38:59,459 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 00:38:59,460 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 00:38:59,480 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:38:59,481 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 00:38:59,523 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a728cff10>
2024-04-12 00:38:59,523 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x766a728bef00> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 00:38:59,535 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a728c7bd0>
2024-04-12 00:38:59,535 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:38:59,535 - DEBUG - send_request_headers.complete
2024-04-12 00:38:59,535 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:38:59,536 - DEBUG - send_request_body.complete
2024-04-12 00:38:59,536 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:38:59,907 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:39:04,738 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:09:04 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=K8lA%2B8NMv9GFWZ95OsQW51tmA0gxH%2BsPiNrzOmW%2Bf9mWyOORxcUuWomVCbi1llet9pcU%2FEXZT8Res3Vm1zYBQ9uexdvkMdWMRP608VR%2BZ31lS6b7OUjqg6bLPSAulRanTv8xQctb8uoG"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d44b82c2c1d18-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:39:04,739 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 00:39:04,739 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:39:04,739 - DEBUG - receive_response_body.complete
2024-04-12 00:39:04,739 - DEBUG - response_closed.started
2024-04-12 00:39:04,740 - DEBUG - response_closed.complete
2024-04-12 00:39:04,740 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 00:39:04,740 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 00:39:04,740 - DEBUG - Retrying due to status code 500
2024-04-12 00:39:04,740 - DEBUG - 1 retry left
2024-04-12 00:39:04,740 - INFO - Retrying request to /chat/completions in 0.789945 seconds
2024-04-12 00:39:05,531 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:39:05,532 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:39:05,533 - DEBUG - send_request_headers.complete
2024-04-12 00:39:05,533 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:39:05,533 - DEBUG - send_request_body.complete
2024-04-12 00:39:05,533 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:39:14,616 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:09:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=Ewa6bbUOhOUoZJQoTt7U7WAvbcIBiCa2%2BmXwB1yX9Ag1%2FFIVfC6T3EldCdGdIuEoq5jgLvOgQ4fgFqDiD8l7BiYyrZvN2wtDPdnCCWvZWSBLGsqaMJKxLDMPI2DyVuQuVWBEmbcEOiFB"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d44ddbdd81d18-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:39:14,616 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 00:39:14,617 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:39:14,617 - DEBUG - receive_response_body.complete
2024-04-12 00:39:14,617 - DEBUG - response_closed.started
2024-04-12 00:39:14,617 - DEBUG - response_closed.complete
2024-04-12 00:39:14,618 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 00:39:14,632 - DEBUG - Attempting to convert response to list
2024-04-12 00:39:14,632 - DEBUG - Response converted to list: ['wife', 'mouse', 'school']
2024-04-12 00:39:14,632 - DEBUG - Attempting to merge videos
2024-04-12 00:39:14,835 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:39:14,835 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:39:14,835 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:39:14,835 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:39:14,835 - DEBUG - STREAM b'IDAT' 103 4553
2024-04-12 00:39:14,835 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:39:14,835 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:39:14,835 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:39:14,835 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:39:14,835 - DEBUG - STREAM b'IDAT' 103 4553
2024-04-12 00:39:14,836 - DEBUG - STREAM b'tEXt' 4668 37
2024-04-12 00:39:14,836 - DEBUG - STREAM b'tEXt' 4717 37
2024-04-12 00:39:14,836 - DEBUG - STREAM b'tEXt' 4766 40
2024-04-12 00:39:14,836 - DEBUG - STREAM b'tEXt' 4818 11
2024-04-12 00:39:14,837 - DEBUG - close.started
2024-04-12 00:39:14,837 - DEBUG - close.complete
2024-04-12 00:39:14,837 - DEBUG - close.started
2024-04-12 00:39:14,837 - DEBUG - close.complete
2024-04-12 00:39:14,836 - DEBUG - Error closing: Operation on closed image
2024-04-12 00:39:14,914 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:39:14,914 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:39:14,914 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:39:14,914 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:39:14,914 - DEBUG - STREAM b'IDAT' 103 4255
2024-04-12 00:39:14,914 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:39:14,914 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:39:14,914 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:39:14,914 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:39:14,914 - DEBUG - STREAM b'IDAT' 103 4255
2024-04-12 00:39:14,914 - DEBUG - STREAM b'tEXt' 4370 37
2024-04-12 00:39:14,914 - DEBUG - STREAM b'tEXt' 4419 37
2024-04-12 00:39:14,914 - DEBUG - STREAM b'tEXt' 4468 40
2024-04-12 00:39:14,914 - DEBUG - STREAM b'tEXt' 4520 12
2024-04-12 00:39:14,915 - DEBUG - Error closing: Operation on closed image
2024-04-12 00:39:15,001 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:42:00,319 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 00:42:00,319 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 00:42:00,337 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 00:42:00,337 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 00:42:00,380 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a7348e810>
2024-04-12 00:42:00,380 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x766a727552e0> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 00:42:00,391 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a727a6f90>
2024-04-12 00:42:00,391 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 00:42:00,391 - DEBUG - send_request_headers.complete
2024-04-12 00:42:00,391 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 00:42:00,391 - DEBUG - send_request_body.complete
2024-04-12 00:42:00,391 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 00:42:00,819 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 00:42:09,722 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:12:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=bXCEmHPqlRTtZokT6eVFIwKLf3ZWc%2BAogxncMqoxCQAS46c3dC1le5BbfDT6h2PIC3bvaa%2Fl%2FT%2BX2WwBp1x4eNM3qmfygZME33XixNmcSf6Sq9Su8T%2F7%2BAuypSqzshJ4s%2BXWGCPh%2FBJw"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d49228c941d95-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 00:42:09,723 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 00:42:09,723 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 00:42:09,723 - DEBUG - receive_response_body.complete
2024-04-12 00:42:09,723 - DEBUG - response_closed.started
2024-04-12 00:42:09,723 - DEBUG - response_closed.complete
2024-04-12 00:42:09,723 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 00:42:09,726 - DEBUG - close.started
2024-04-12 00:42:09,727 - DEBUG - close.complete
2024-04-12 00:42:09,728 - DEBUG - Attempting to convert response to list
2024-04-12 00:42:09,728 - DEBUG - Response converted to list: ['cat', 'expensive']
2024-04-12 00:42:09,728 - DEBUG - Attempting to merge videos
2024-04-12 00:42:09,921 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:42:09,921 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:42:09,921 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:42:09,921 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:42:09,921 - DEBUG - STREAM b'IDAT' 103 2570
2024-04-12 00:42:09,921 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:42:09,921 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:42:09,921 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:42:09,921 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:42:09,921 - DEBUG - STREAM b'IDAT' 103 2570
2024-04-12 00:42:09,921 - DEBUG - STREAM b'tEXt' 2685 37
2024-04-12 00:42:09,921 - DEBUG - STREAM b'tEXt' 2734 37
2024-04-12 00:42:09,922 - DEBUG - STREAM b'tEXt' 2783 40
2024-04-12 00:42:09,922 - DEBUG - STREAM b'tEXt' 2835 9
2024-04-12 00:42:09,922 - DEBUG - Error closing: Operation on closed image
2024-04-12 00:42:10,001 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:42:10,001 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:42:10,001 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:42:10,001 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:42:10,001 - DEBUG - STREAM b'IDAT' 103 6282
2024-04-12 00:42:10,001 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 00:42:10,001 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 00:42:10,001 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 00:42:10,001 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 00:42:10,001 - DEBUG - STREAM b'IDAT' 103 6282
2024-04-12 00:42:10,002 - DEBUG - STREAM b'tEXt' 6397 37
2024-04-12 00:42:10,002 - DEBUG - STREAM b'tEXt' 6446 37
2024-04-12 00:42:10,002 - DEBUG - STREAM b'tEXt' 6495 40
2024-04-12 00:42:10,002 - DEBUG - STREAM b'tEXt' 6547 15
2024-04-12 00:42:10,002 - DEBUG - Error closing: Operation on closed image
2024-04-12 00:42:10,103 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:01:20,939 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:01:20,940 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:01:20,957 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:01:20,958 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:01:20,992 - DEBUG - Resetting dropped connection: api.smith.langchain.com
2024-04-12 01:01:21,002 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a734bc2d0>
2024-04-12 01:01:21,002 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x766a7ad4fb60> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:01:21,013 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a734bc210>
2024-04-12 01:01:21,013 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:01:21,013 - DEBUG - send_request_headers.complete
2024-04-12 01:01:21,013 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:01:21,013 - DEBUG - send_request_body.complete
2024-04-12 01:01:21,013 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:01:21,745 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:01:32,389 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:31:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=NkxRK%2BISx2A5P7wQ3tVeOpPtyU4LnLRsafpL3AbiY52DRfJhTzRQr6qzd9vFoZFtBarOPF3o12n8jOGWVBRuQyml5%2FWtjOzcNSzctnzvfOuKaNJdSH95qmQWuRg2PnUVcHt%2Fmgv%2FXkUJ"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d657848561da1-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:01:32,389 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:01:32,389 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:01:32,390 - DEBUG - receive_response_body.complete
2024-04-12 01:01:32,390 - DEBUG - response_closed.started
2024-04-12 01:01:32,390 - DEBUG - response_closed.complete
2024-04-12 01:01:32,390 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:01:32,399 - DEBUG - Attempting to convert response to list
2024-04-12 01:01:32,399 - DEBUG - Response converted to list: ['i', 'train', 'afternoon']
2024-04-12 01:01:32,399 - DEBUG - Attempting to merge videos
2024-04-12 01:01:32,646 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:01:32,646 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:01:32,646 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:01:32,646 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:01:32,646 - DEBUG - STREAM b'IDAT' 103 344
2024-04-12 01:01:32,646 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:01:32,646 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:01:32,646 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:01:32,646 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:01:32,646 - DEBUG - STREAM b'IDAT' 103 344
2024-04-12 01:01:32,646 - DEBUG - STREAM b'tEXt' 459 37
2024-04-12 01:01:32,646 - DEBUG - STREAM b'tEXt' 508 37
2024-04-12 01:01:32,646 - DEBUG - STREAM b'tEXt' 557 40
2024-04-12 01:01:32,646 - DEBUG - STREAM b'tEXt' 609 7
2024-04-12 01:01:32,646 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:01:32,721 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:01:32,721 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:01:32,721 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:01:32,721 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:01:32,721 - DEBUG - STREAM b'IDAT' 103 3148
2024-04-12 01:01:32,721 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:01:32,721 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:01:32,721 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:01:32,721 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:01:32,722 - DEBUG - STREAM b'IDAT' 103 3148
2024-04-12 01:01:32,722 - DEBUG - STREAM b'tEXt' 3263 37
2024-04-12 01:01:32,722 - DEBUG - STREAM b'tEXt' 3312 37
2024-04-12 01:01:32,722 - DEBUG - STREAM b'tEXt' 3361 40
2024-04-12 01:01:32,722 - DEBUG - STREAM b'tEXt' 3413 11
2024-04-12 01:01:32,722 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:01:32,797 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:01:32,797 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:01:32,797 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:01:32,797 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:01:32,797 - DEBUG - STREAM b'IDAT' 103 5663
2024-04-12 01:01:32,797 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:01:32,797 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:01:32,797 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:01:32,797 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:01:32,797 - DEBUG - STREAM b'IDAT' 103 5663
2024-04-12 01:01:32,798 - DEBUG - STREAM b'tEXt' 5778 37
2024-04-12 01:01:32,798 - DEBUG - STREAM b'tEXt' 5827 37
2024-04-12 01:01:32,798 - DEBUG - STREAM b'tEXt' 5876 40
2024-04-12 01:01:32,798 - DEBUG - STREAM b'tEXt' 5928 15
2024-04-12 01:01:32,798 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:01:32,812 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:03:25,964 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:03:25,965 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:03:25,983 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:03:25,984 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:03:26,025 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a728cf010>
2024-04-12 01:03:26,025 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x766a72755fd0> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:03:26,036 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x766a728cfb90>
2024-04-12 01:03:26,036 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:03:26,036 - DEBUG - send_request_headers.complete
2024-04-12 01:03:26,036 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:03:26,036 - DEBUG - send_request_body.complete
2024-04-12 01:03:26,036 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:03:26,393 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:03:32,813 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:33:32 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=QIxmCSOR0SgyRJMBpG1q%2BFGPNSuhcwse0R%2BMjJCwoLYItS4OKIB6bxNg5iIj%2BTMpZl0mYbB49jo7AgC7GKJ1%2FC4xLruDhqlFc78eWieiHn9otMClp3%2FbRCbZN21euSa%2BgHx45tOrEfeI"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d6885b90932af-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:03:32,814 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:03:32,814 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:03:32,814 - DEBUG - receive_response_body.complete
2024-04-12 01:03:32,814 - DEBUG - response_closed.started
2024-04-12 01:03:32,814 - DEBUG - response_closed.complete
2024-04-12 01:03:32,814 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:03:32,814 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:03:32,814 - DEBUG - Retrying due to status code 500
2024-04-12 01:03:32,814 - DEBUG - 1 retry left
2024-04-12 01:03:32,814 - INFO - Retrying request to /chat/completions in 0.956756 seconds
2024-04-12 01:03:33,771 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:03:33,772 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:03:33,773 - DEBUG - send_request_headers.complete
2024-04-12 01:03:33,773 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:03:33,773 - DEBUG - send_request_body.complete
2024-04-12 01:03:33,773 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:03:40,090 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:33:40 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=sYfWvpp3x5TMygUowLbf2l5D3NAR2rrt02zdt5f%2FNFSKffwUO7kgnYd5gUu272aO9n3j6tKrkkN4Y6g7ti30S7CTl5iCL%2Fvvb03kwaFKuUUJdOtgjyQJfGgFtmM3hBBXlVj8O6q3OY4D"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d68b60dd232af-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:03:40,090 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:03:40,090 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:03:40,090 - DEBUG - receive_response_body.complete
2024-04-12 01:03:40,090 - DEBUG - response_closed.started
2024-04-12 01:03:40,090 - DEBUG - response_closed.complete
2024-04-12 01:03:40,090 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:03:40,090 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:03:40,091 - DEBUG - Retrying due to status code 500
2024-04-12 01:03:40,091 - DEBUG - 0 retries left
2024-04-12 01:03:40,091 - INFO - Retrying request to /chat/completions in 1.823702 seconds
2024-04-12 01:03:41,915 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:03:41,917 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:03:41,917 - DEBUG - send_request_headers.complete
2024-04-12 01:03:41,917 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:03:41,918 - DEBUG - send_request_body.complete
2024-04-12 01:03:41,918 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:03:47,356 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:33:47 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=%2BGbZMuRhzL2mGolO50rWbrnaHGmD53yIv51DJTJESyKrq1%2F3i66A%2BkzhVt0GR%2FeWqUJ6ngr6MBDqSTcKgUfhC4rNYIqaGLqdzBLq3VxPQwHjKMT0LnRnovZ29da5NzdwJCkK0NcWNl6w"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d68e8f85a32af-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:03:47,356 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:03:47,356 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:03:47,356 - DEBUG - receive_response_body.complete
2024-04-12 01:03:47,356 - DEBUG - response_closed.started
2024-04-12 01:03:47,356 - DEBUG - response_closed.complete
2024-04-12 01:03:47,356 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:03:47,356 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:03:47,357 - DEBUG - Re-raising status error
2024-04-12 01:03:48,014 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:05:08,080 - DEBUG - Closing Client.session
2024-04-12 01:05:08,130 - DEBUG - close.started
2024-04-12 01:05:08,130 - DEBUG - close.complete
2024-04-12 01:05:08,131 - DEBUG - close.started
2024-04-12 01:05:08,131 - DEBUG - close.complete
2024-04-12 01:05:08,131 - DEBUG - close.started
2024-04-12 01:05:08,131 - DEBUG - close.complete
2024-04-12 01:10:27,207 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 01:10:27,211 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:10:27,212 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:10:27,230 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:10:27,236 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:10:27,281 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7a22cf02d4d0>
2024-04-12 01:10:27,282 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7a22cf1e4950> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:10:27,296 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7a22cfbbd4d0>
2024-04-12 01:10:27,296 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:10:27,296 - DEBUG - send_request_headers.complete
2024-04-12 01:10:27,296 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:10:27,296 - DEBUG - send_request_body.complete
2024-04-12 01:10:27,296 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:10:27,676 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 01:10:28,123 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:10:37,559 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:40:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=xVkId%2B9a4M7HenzIsX%2FmW3%2FnCqStQjHbbGsnIp0q%2Bj6hX%2F3Drmz2XertadTIc6cqDHge%2BNFU1D3VQyYwd2OIiw1cToXf1ifU1YFOcYEgqS2yVkUQSLcl5kSG70%2Ff036T3ATNXzTUMIdq"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d72ce8c691da1-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:10:37,559 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:10:37,559 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:10:37,560 - DEBUG - receive_response_body.complete
2024-04-12 01:10:37,560 - DEBUG - response_closed.started
2024-04-12 01:10:37,560 - DEBUG - response_closed.complete
2024-04-12 01:10:37,560 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:10:37,568 - DEBUG - Attempting to convert response to list
2024-04-12 01:10:37,569 - DEBUG - Response converted to list: ['train', 'train station']
2024-04-12 01:10:37,569 - DEBUG - Attempting to merge videos
2024-04-12 01:10:37,809 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:10:37,809 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:10:37,809 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:10:37,809 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:10:37,809 - DEBUG - STREAM b'IDAT' 103 3148
2024-04-12 01:10:37,810 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:10:37,810 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:10:37,810 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:10:37,810 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:10:37,810 - DEBUG - STREAM b'IDAT' 103 3148
2024-04-12 01:10:37,810 - DEBUG - STREAM b'tEXt' 3263 37
2024-04-12 01:10:37,810 - DEBUG - STREAM b'tEXt' 3312 37
2024-04-12 01:10:37,810 - DEBUG - STREAM b'tEXt' 3361 40
2024-04-12 01:10:37,810 - DEBUG - STREAM b'tEXt' 3413 11
2024-04-12 01:10:37,811 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:10:37,916 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:10:37,916 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:10:37,916 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:10:37,916 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:10:37,916 - DEBUG - STREAM b'IDAT' 103 6228
2024-04-12 01:10:37,916 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:10:37,916 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:10:37,916 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:10:37,916 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:10:37,916 - DEBUG - STREAM b'IDAT' 103 6228
2024-04-12 01:10:37,917 - DEBUG - STREAM b'tEXt' 6343 37
2024-04-12 01:10:37,917 - DEBUG - STREAM b'tEXt' 6392 37
2024-04-12 01:10:37,917 - DEBUG - STREAM b'tEXt' 6441 40
2024-04-12 01:10:37,917 - DEBUG - STREAM b'tEXt' 6493 19
2024-04-12 01:10:37,918 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:10:37,938 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:12:57,277 - DEBUG - Closing Client.session
2024-04-12 01:12:57,367 - DEBUG - close.started
2024-04-12 01:12:57,367 - DEBUG - close.complete
2024-04-12 01:14:14,714 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 01:14:14,721 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:14:14,723 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:14:14,759 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:14:14,774 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:14:14,824 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7c829af17510>
2024-04-12 01:14:14,824 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7c829b0d8950> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:14:14,838 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7c829af6dc50>
2024-04-12 01:14:14,839 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:14:14,839 - DEBUG - send_request_headers.complete
2024-04-12 01:14:14,839 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:14:14,839 - DEBUG - send_request_body.complete
2024-04-12 01:14:14,839 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:14:15,190 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 01:14:15,618 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:14:24,290 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:44:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=qeKFIzL4jpFVbcJWsWKRWJtYLQl%2Fg21iSiXe%2F%2BufOaS6dD5VZkwnhwrhH2AF7rXbdR7KMqMkWSoWkNLUaOD9Q%2FCjsxzMXu9RCbMbC7Gb4S4942MWBOrGG9RQRej5YE6NuUtXb1fG3nPF"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d785caaf51d35-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:14:24,291 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:14:24,291 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:14:24,292 - DEBUG - receive_response_body.complete
2024-04-12 01:14:24,292 - DEBUG - response_closed.started
2024-04-12 01:14:24,292 - DEBUG - response_closed.complete
2024-04-12 01:14:24,292 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:14:24,305 - DEBUG - Attempting to convert response to list
2024-04-12 01:14:24,305 - DEBUG - Response converted to list: ['dog', 'newspaper']
2024-04-12 01:14:24,305 - DEBUG - Attempting to merge videos
2024-04-12 01:14:24,511 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:14:24,511 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:14:24,511 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:14:24,511 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:14:24,511 - DEBUG - STREAM b'IDAT' 103 3230
2024-04-12 01:14:24,511 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:14:24,511 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:14:24,511 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:14:24,512 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:14:24,512 - DEBUG - STREAM b'IDAT' 103 3230
2024-04-12 01:14:24,512 - DEBUG - STREAM b'tEXt' 3345 37
2024-04-12 01:14:24,512 - DEBUG - STREAM b'tEXt' 3394 37
2024-04-12 01:14:24,512 - DEBUG - STREAM b'tEXt' 3443 40
2024-04-12 01:14:24,512 - DEBUG - STREAM b'tEXt' 3495 9
2024-04-12 01:14:24,512 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:14:24,684 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:14:46,962 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:14:46,963 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:14:46,990 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:14:46,990 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:14:47,033 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7c829b05dd10>
2024-04-12 01:14:47,034 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7c829b0db380> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:14:47,049 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7c829afb7b10>
2024-04-12 01:14:47,049 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:14:47,049 - DEBUG - send_request_headers.complete
2024-04-12 01:14:47,049 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:14:47,049 - DEBUG - send_request_body.complete
2024-04-12 01:14:47,049 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:14:47,386 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:14:51,836 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:44:51 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=u29%2F0r2GtJnpNvLAnK%2Bdmi3KsoKvBG6w7LuFVSb6itNnuIYV15D1Epe8h7%2BUh13nH4OHsZOcybD%2FhVj37BjnVSJQTXABIpUhsMNs9XK6kRdXvW1N6cHMmH67NXrvUHeAi5wNaduo1sTK"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d7925f88d1d89-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:14:51,836 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:14:51,836 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:14:51,836 - DEBUG - receive_response_body.complete
2024-04-12 01:14:51,836 - DEBUG - response_closed.started
2024-04-12 01:14:51,836 - DEBUG - response_closed.complete
2024-04-12 01:14:51,837 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:14:51,837 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:14:51,849 - DEBUG - Retrying due to status code 500
2024-04-12 01:14:51,849 - DEBUG - 1 retry left
2024-04-12 01:14:51,849 - INFO - Retrying request to /chat/completions in 0.975882 seconds
2024-04-12 01:14:52,826 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:14:52,827 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:14:52,827 - DEBUG - send_request_headers.complete
2024-04-12 01:14:52,827 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:14:52,827 - DEBUG - send_request_body.complete
2024-04-12 01:14:52,828 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:14:58,084 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 19:44:58 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=SeFv7Pdxa7kbCwfJhDKV%2BK5Eg4YItHLixbWxDheFZpfp0d4rb3bahN6Dn8c%2BSpZZcIo3D0YaARQl%2B74Nm15eeE3qbLR4Od0bMUQBEG%2B4rp7i7cGe3HpbWULf4uRoswnOsHoO5GpwQw6Z"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d794a19a51d89-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:14:58,084 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:14:58,084 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:14:58,085 - DEBUG - receive_response_body.complete
2024-04-12 01:14:58,085 - DEBUG - response_closed.started
2024-04-12 01:14:58,085 - DEBUG - response_closed.complete
2024-04-12 01:14:58,085 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:14:58,085 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:14:58,085 - DEBUG - Retrying due to status code 500
2024-04-12 01:14:58,086 - DEBUG - 0 retries left
2024-04-12 01:14:58,086 - INFO - Retrying request to /chat/completions in 1.940208 seconds
2024-04-12 01:15:00,026 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:15:00,027 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:15:00,027 - DEBUG - send_request_headers.complete
2024-04-12 01:15:00,027 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:15:00,027 - DEBUG - send_request_body.complete
2024-04-12 01:15:00,027 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:15:10,478 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:45:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=jXJVoBzgGPoS5r2ynN5SfTJAO5RG2uXKo6uvc69EtV%2BBSbh76y4hpExpzCCytWNL0XFuE6Fng8f6%2F4HL22UfX0dJUGF1TIfrNSGbTLGThxkalFv7MD%2BeaiJLTjGsFkNR8YXEoPfEmmje"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d79772e931d89-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:15:10,479 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:15:10,479 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:15:10,480 - DEBUG - receive_response_body.complete
2024-04-12 01:15:10,480 - DEBUG - response_closed.started
2024-04-12 01:15:10,480 - DEBUG - response_closed.complete
2024-04-12 01:15:10,480 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:15:10,491 - DEBUG - Attempting to convert response to list
2024-04-12 01:15:10,491 - DEBUG - Response converted to list: ['cold', 'winter', 'season']
2024-04-12 01:15:10,491 - DEBUG - Attempting to merge videos
2024-04-12 01:15:10,718 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:15:10,718 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:15:10,718 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:15:10,718 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:15:10,718 - DEBUG - STREAM b'IDAT' 103 3391
2024-04-12 01:15:10,718 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:15:10,718 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:15:10,718 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:15:10,718 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:15:10,718 - DEBUG - STREAM b'IDAT' 103 3391
2024-04-12 01:15:10,719 - DEBUG - STREAM b'tEXt' 3506 37
2024-04-12 01:15:10,719 - DEBUG - STREAM b'tEXt' 3555 37
2024-04-12 01:15:10,719 - DEBUG - STREAM b'tEXt' 3604 40
2024-04-12 01:15:10,719 - DEBUG - STREAM b'tEXt' 3656 10
2024-04-12 01:15:10,719 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:15:10,818 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:15:10,818 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:15:10,818 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:15:10,818 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:15:10,818 - DEBUG - STREAM b'IDAT' 103 4200
2024-04-12 01:15:10,818 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:15:10,818 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:15:10,818 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:15:10,818 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:15:10,818 - DEBUG - STREAM b'IDAT' 103 4200
2024-04-12 01:15:10,819 - DEBUG - STREAM b'tEXt' 4315 37
2024-04-12 01:15:10,819 - DEBUG - STREAM b'tEXt' 4364 37
2024-04-12 01:15:10,819 - DEBUG - STREAM b'tEXt' 4413 40
2024-04-12 01:15:10,819 - DEBUG - STREAM b'tEXt' 4465 12
2024-04-12 01:15:10,819 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:15:10,862 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:16:00,548 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:16:00,549 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:16:00,584 - DEBUG - close.started
2024-04-12 01:16:00,584 - DEBUG - close.complete
2024-04-12 01:16:00,587 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:16:00,587 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:16:00,630 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7c8298956710>
2024-04-12 01:16:00,630 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7c829b0d8e60> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:16:00,642 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7c82989560d0>
2024-04-12 01:16:00,642 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:16:00,642 - DEBUG - send_request_headers.complete
2024-04-12 01:16:00,642 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:16:00,643 - DEBUG - send_request_body.complete
2024-04-12 01:16:00,643 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:16:01,063 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:16:10,582 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:46:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=tQGfJpK0oJTzDmEwgxh%2FoRfrP3a45G5%2BquNa2lKePhFVTRbpan%2BtC5beQqBi9KVEM4hojhJWfjdIQZnDk8kzbOw%2F5ZKRIJPh9NQcEaZvC12G83WLyduokJ9AKKD0mucQaosS5SCwPhHA"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d7af1fc551da5-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:16:10,582 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:16:10,583 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:16:10,583 - DEBUG - receive_response_body.complete
2024-04-12 01:16:10,583 - DEBUG - response_closed.started
2024-04-12 01:16:10,583 - DEBUG - response_closed.complete
2024-04-12 01:16:10,583 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:16:10,591 - DEBUG - Attempting to convert response to list
2024-04-12 01:16:10,591 - DEBUG - Response converted to list: ['tomorrow', 'good night']
2024-04-12 01:16:10,591 - DEBUG - Attempting to merge videos
2024-04-12 01:16:10,807 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:16:10,807 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:16:10,807 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:16:10,807 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:16:10,807 - DEBUG - STREAM b'IDAT' 103 4438
2024-04-12 01:16:10,807 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:16:10,807 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:16:10,807 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:16:10,807 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:16:10,807 - DEBUG - STREAM b'IDAT' 103 4438
2024-04-12 01:16:10,808 - DEBUG - STREAM b'tEXt' 4553 37
2024-04-12 01:16:10,808 - DEBUG - STREAM b'tEXt' 4602 37
2024-04-12 01:16:10,808 - DEBUG - STREAM b'tEXt' 4651 40
2024-04-12 01:16:10,808 - DEBUG - STREAM b'tEXt' 4703 14
2024-04-12 01:16:10,808 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:16:10,902 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:16:10,902 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:16:10,902 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:16:10,902 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:16:10,902 - DEBUG - STREAM b'IDAT' 103 5949
2024-04-12 01:16:10,902 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:16:10,902 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:16:10,902 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:16:10,902 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:16:10,902 - DEBUG - STREAM b'IDAT' 103 5949
2024-04-12 01:16:10,903 - DEBUG - STREAM b'tEXt' 6064 37
2024-04-12 01:16:10,903 - DEBUG - STREAM b'tEXt' 6113 37
2024-04-12 01:16:10,903 - DEBUG - STREAM b'tEXt' 6162 40
2024-04-12 01:16:10,903 - DEBUG - STREAM b'tEXt' 6214 16
2024-04-12 01:16:10,903 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:16:10,974 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:21:45,434 - DEBUG - Closing Client.session
2024-04-12 01:21:45,521 - DEBUG - close.started
2024-04-12 01:21:45,522 - DEBUG - close.complete
2024-04-12 01:21:45,522 - DEBUG - close.started
2024-04-12 01:21:45,522 - DEBUG - close.complete
2024-04-12 01:27:16,965 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 01:27:16,969 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:27:16,970 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:27:16,988 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:27:16,995 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:27:17,461 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 01:27:17,872 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:27:22,042 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fec86eb79d0>
2024-04-12 01:27:22,042 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fec86fe4b00> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:27:22,056 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fec86f8bd50>
2024-04-12 01:27:22,056 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:27:22,056 - DEBUG - send_request_headers.complete
2024-04-12 01:27:22,056 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:27:22,056 - DEBUG - send_request_body.complete
2024-04-12 01:27:22,056 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:27:30,373 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:57:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=U80x%2FklcQYea40%2B5wrLOOF%2BkABh0RThE4KJYTzTNTOkxmcxn4HWypdnMDAUjzip2N3s%2Fvu3DQp8ZHlunVd6N2i57uaVBV8Fa9VURt9OWzGnV5Up4Raj%2BlwK3vXESr6jpWsAf7o4UP63R"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d8b94dee81da9-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:27:30,375 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:27:30,375 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:27:30,376 - DEBUG - receive_response_body.complete
2024-04-12 01:27:30,376 - DEBUG - response_closed.started
2024-04-12 01:27:30,376 - DEBUG - response_closed.complete
2024-04-12 01:27:30,376 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:27:30,797 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:27:57,972 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:27:57,974 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:27:58,021 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:27:58,022 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:27:58,070 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fec92798750>
2024-04-12 01:27:58,070 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7fec86fe4a70> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:27:58,082 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7fec86e87690>
2024-04-12 01:27:58,083 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:27:58,083 - DEBUG - send_request_headers.complete
2024-04-12 01:27:58,083 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:27:58,083 - DEBUG - send_request_body.complete
2024-04-12 01:27:58,083 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:27:58,470 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:28:06,888 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 19:58:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=wLYBnwpSKI%2F7KXKbgtTtFjq%2FDU5Sy8fpTdU83I7AOP%2FdZtBh%2FCdiGb2AroCO37TC8om%2Fx3FfmrwJnXLXTt55aHBJ6zXnGWG5XseRgaCyLaIhatRK4AnaWdWF%2BYelfy3ni0psqTsvJyAj"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d8c760fd91d89-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:28:06,888 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:28:06,888 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:28:06,889 - DEBUG - receive_response_body.complete
2024-04-12 01:28:06,889 - DEBUG - response_closed.started
2024-04-12 01:28:06,889 - DEBUG - response_closed.complete
2024-04-12 01:28:06,889 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:28:06,893 - DEBUG - Attempting to convert response to list
2024-04-12 01:28:06,893 - DEBUG - Response converted to list: ['how are you', 'evening', 'good night']
2024-04-12 01:28:06,893 - DEBUG - Attempting to merge videos
2024-04-12 01:28:07,165 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:28:07,165 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:28:07,165 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:28:07,165 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:28:07,165 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 01:28:07,165 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:28:07,165 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:28:07,165 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:28:07,165 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:28:07,165 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 01:28:07,166 - DEBUG - STREAM b'tEXt' 7512 37
2024-04-12 01:28:07,166 - DEBUG - STREAM b'tEXt' 7561 37
2024-04-12 01:28:07,166 - DEBUG - STREAM b'tEXt' 7610 40
2024-04-12 01:28:07,166 - DEBUG - STREAM b'tEXt' 7662 17
2024-04-12 01:28:07,166 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:28:07,263 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:28:07,263 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:28:07,263 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:28:07,263 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:28:07,264 - DEBUG - STREAM b'IDAT' 103 4501
2024-04-12 01:28:07,264 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:28:07,264 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:28:07,264 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:28:07,264 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:28:07,264 - DEBUG - STREAM b'IDAT' 103 4501
2024-04-12 01:28:07,264 - DEBUG - STREAM b'tEXt' 4616 37
2024-04-12 01:28:07,264 - DEBUG - STREAM b'tEXt' 4665 37
2024-04-12 01:28:07,264 - DEBUG - STREAM b'tEXt' 4714 40
2024-04-12 01:28:07,264 - DEBUG - STREAM b'tEXt' 4766 13
2024-04-12 01:28:07,264 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:28:07,360 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:28:07,360 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:28:07,360 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:28:07,360 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:28:07,360 - DEBUG - STREAM b'IDAT' 103 5949
2024-04-12 01:28:07,360 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:28:07,360 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:28:07,360 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:28:07,360 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:28:07,360 - DEBUG - STREAM b'IDAT' 103 5949
2024-04-12 01:28:07,361 - DEBUG - STREAM b'tEXt' 6064 37
2024-04-12 01:28:07,361 - DEBUG - STREAM b'tEXt' 6113 37
2024-04-12 01:28:07,361 - DEBUG - STREAM b'tEXt' 6162 40
2024-04-12 01:28:07,361 - DEBUG - STREAM b'tEXt' 6214 16
2024-04-12 01:28:07,361 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:28:07,376 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:30:10,703 - DEBUG - Closing Client.session
2024-04-12 01:30:10,753 - DEBUG - close.started
2024-04-12 01:30:10,753 - DEBUG - close.complete
2024-04-12 01:30:10,753 - DEBUG - close.started
2024-04-12 01:30:10,753 - DEBUG - close.complete
2024-04-12 01:30:25,738 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 01:30:25,743 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:30:25,744 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:30:25,762 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:30:25,778 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:30:25,821 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x77a35fa25710>
2024-04-12 01:30:25,821 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x77a35fbe4b00> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:30:25,835 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x77a35fa26190>
2024-04-12 01:30:25,835 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:30:25,836 - DEBUG - send_request_headers.complete
2024-04-12 01:30:25,836 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:30:25,836 - DEBUG - send_request_body.complete
2024-04-12 01:30:25,836 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:30:26,307 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 01:30:26,737 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:30:34,930 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:00:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=TACAJXsrb1dXxDQlKXtWGLPABRkp1SPNCKaX3KnI1YKB0oZWAFezEjsUVLhzP7FEE8tqJpMmAq4F9b1UVOz5xLbK0TO5ZvTkSRryYjxiH%2FZkKnUbd7tbspRvtaOUMWO9e4ND3I0AKe1W"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872d90118a0e1d24-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:30:34,931 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:30:34,932 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:30:34,932 - DEBUG - receive_response_body.complete
2024-04-12 01:30:34,932 - DEBUG - response_closed.started
2024-04-12 01:30:34,932 - DEBUG - response_closed.complete
2024-04-12 01:30:34,932 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:30:34,938 - DEBUG - Attempting to convert response to list
2024-04-12 01:30:34,938 - DEBUG - Response converted to list: ['good afternoon', 'nice', 'poor', 'how are you']
2024-04-12 01:30:34,938 - DEBUG - Attempting to merge videos
2024-04-12 01:30:35,273 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,273 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,273 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,273 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,273 - DEBUG - STREAM b'IDAT' 103 8312
2024-04-12 01:30:35,273 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,273 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,273 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,273 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,273 - DEBUG - STREAM b'IDAT' 103 8312
2024-04-12 01:30:35,274 - DEBUG - STREAM b'tEXt' 8427 37
2024-04-12 01:30:35,274 - DEBUG - STREAM b'tEXt' 8476 37
2024-04-12 01:30:35,274 - DEBUG - STREAM b'tEXt' 8525 40
2024-04-12 01:30:35,274 - DEBUG - STREAM b'tEXt' 8577 20
2024-04-12 01:30:35,274 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:30:35,319 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:30:35,352 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,352 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,352 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,352 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,352 - DEBUG - STREAM b'IDAT' 103 2957
2024-04-12 01:30:35,352 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,352 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,352 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,352 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,352 - DEBUG - STREAM b'IDAT' 103 2957
2024-04-12 01:30:35,353 - DEBUG - STREAM b'tEXt' 3072 37
2024-04-12 01:30:35,353 - DEBUG - STREAM b'tEXt' 3121 37
2024-04-12 01:30:35,353 - DEBUG - STREAM b'tEXt' 3170 40
2024-04-12 01:30:35,353 - DEBUG - STREAM b'tEXt' 3222 10
2024-04-12 01:30:35,353 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:30:35,429 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,429 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,429 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,429 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,429 - DEBUG - STREAM b'IDAT' 103 2865
2024-04-12 01:30:35,429 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,429 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,429 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,429 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,429 - DEBUG - STREAM b'IDAT' 103 2865
2024-04-12 01:30:35,429 - DEBUG - STREAM b'tEXt' 2980 37
2024-04-12 01:30:35,429 - DEBUG - STREAM b'tEXt' 3029 37
2024-04-12 01:30:35,429 - DEBUG - STREAM b'tEXt' 3078 40
2024-04-12 01:30:35,429 - DEBUG - STREAM b'tEXt' 3130 10
2024-04-12 01:30:35,429 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:30:35,505 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,505 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,505 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,505 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,505 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 01:30:35,505 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:30:35,505 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:30:35,505 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:30:35,505 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:30:35,505 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 01:30:35,506 - DEBUG - STREAM b'tEXt' 7512 37
2024-04-12 01:30:35,506 - DEBUG - STREAM b'tEXt' 7561 37
2024-04-12 01:30:35,506 - DEBUG - STREAM b'tEXt' 7610 40
2024-04-12 01:30:35,506 - DEBUG - STREAM b'tEXt' 7662 17
2024-04-12 01:30:35,506 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:41:27,807 - DEBUG - Closing Client.session
2024-04-12 01:41:27,875 - DEBUG - close.started
2024-04-12 01:41:27,875 - DEBUG - close.complete
2024-04-12 01:41:46,619 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 01:41:46,624 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:41:46,625 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:41:46,643 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:41:46,652 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:41:46,691 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x73c7a6c1acd0>
2024-04-12 01:41:46,691 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x73c7a6de8b00> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:41:46,710 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x73c7a6c1bd50>
2024-04-12 01:41:46,711 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:41:46,711 - DEBUG - send_request_headers.complete
2024-04-12 01:41:46,711 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:41:46,711 - DEBUG - send_request_body.complete
2024-04-12 01:41:46,711 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:41:47,192 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 01:41:47,641 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:41:52,835 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 20:11:52 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=IFZk1dGNXN3GPFRXBGV9xCBxRYSzQQsJIhASDFRkZdvFX%2FPNpGZq0wVYQ8tk8flgDJX%2FnGBL07gjAk4NMRDWHbvB1RtiLkTAJOmpO%2B4bmSeXaTaSMfcI%2FDimuZEdYwXBMyb2GbM538f9"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872da0b0ffba1d35-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:41:52,841 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:41:52,841 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:41:52,841 - DEBUG - receive_response_body.complete
2024-04-12 01:41:52,841 - DEBUG - response_closed.started
2024-04-12 01:41:52,841 - DEBUG - response_closed.complete
2024-04-12 01:41:52,841 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:41:52,841 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:41:52,842 - DEBUG - Retrying due to status code 500
2024-04-12 01:41:52,842 - DEBUG - 1 retry left
2024-04-12 01:41:52,842 - INFO - Retrying request to /chat/completions in 0.822895 seconds
2024-04-12 01:41:53,665 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:41:53,667 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:41:53,667 - DEBUG - send_request_headers.complete
2024-04-12 01:41:53,667 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:41:53,667 - DEBUG - send_request_body.complete
2024-04-12 01:41:53,668 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:41:58,309 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 20:11:58 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=bZ5p9o%2F%2Bxa6nzyaSznms3x0tMQeWQsjoL7EHgCRluqh32PHbitLVgTwVQZWs44gBnqXbuQHjO1Q1gark7ujst60TtN4xyjAKXL3fWHVVUSjxHQL4SKL9LsYrYDxJ6RY7DUOUMMVZ8opS"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872da0dc6ff41d35-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:41:58,310 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 01:41:58,310 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:41:58,310 - DEBUG - receive_response_body.complete
2024-04-12 01:41:58,310 - DEBUG - response_closed.started
2024-04-12 01:41:58,310 - DEBUG - response_closed.complete
2024-04-12 01:41:58,310 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 01:41:58,310 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 01:41:58,311 - DEBUG - Retrying due to status code 500
2024-04-12 01:41:58,311 - DEBUG - 0 retries left
2024-04-12 01:41:58,311 - INFO - Retrying request to /chat/completions in 1.633449 seconds
2024-04-12 01:41:59,945 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:41:59,946 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:41:59,947 - DEBUG - send_request_headers.complete
2024-04-12 01:41:59,947 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:41:59,947 - DEBUG - send_request_body.complete
2024-04-12 01:41:59,947 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:42:10,376 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:12:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=7I6XEkmwa8XHAfTron4GfwKz0qULxYBlch2y0F%2FNDS2hM0FjcS%2F4Xb0lj5XdQynyu2JWMGvkBosg9lrLtT2oKXwfkM4V8NLIzA6zKIDgDIt4g9zJzVY9xwAjaoYRwQ73mA1zx6e5vZZq"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872da103a8891d35-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:42:10,376 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:42:10,377 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:42:10,377 - DEBUG - receive_response_body.complete
2024-04-12 01:42:10,377 - DEBUG - response_closed.started
2024-04-12 01:42:10,377 - DEBUG - response_closed.complete
2024-04-12 01:42:10,378 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:42:10,391 - DEBUG - Attempting to convert response to list
2024-04-12 01:42:10,391 - DEBUG - Response converted to list: ['sign', 'letter', 'doctor']
2024-04-12 01:42:10,391 - DEBUG - Attempting to merge videos
2024-04-12 01:42:10,663 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:42:10,663 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:42:10,663 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:42:10,663 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:42:10,663 - DEBUG - STREAM b'IDAT' 103 3480
2024-04-12 01:42:10,663 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:42:10,663 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:42:10,663 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:42:10,663 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:42:10,663 - DEBUG - STREAM b'IDAT' 103 3480
2024-04-12 01:42:10,664 - DEBUG - STREAM b'tEXt' 3595 37
2024-04-12 01:42:10,664 - DEBUG - STREAM b'tEXt' 3644 37
2024-04-12 01:42:10,664 - DEBUG - STREAM b'tEXt' 3693 40
2024-04-12 01:42:10,664 - DEBUG - STREAM b'tEXt' 3745 10
2024-04-12 01:42:10,664 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:42:10,742 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:42:10,742 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:42:10,742 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:42:10,742 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:42:10,742 - DEBUG - STREAM b'IDAT' 103 2811
2024-04-12 01:42:10,742 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:42:10,742 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:42:10,742 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:42:10,742 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:42:10,742 - DEBUG - STREAM b'IDAT' 103 2811
2024-04-12 01:42:10,743 - DEBUG - STREAM b'tEXt' 2926 37
2024-04-12 01:42:10,743 - DEBUG - STREAM b'tEXt' 2975 37
2024-04-12 01:42:10,743 - DEBUG - STREAM b'tEXt' 3024 40
2024-04-12 01:42:10,743 - DEBUG - STREAM b'tEXt' 3076 12
2024-04-12 01:42:10,743 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:42:10,762 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:42:10,822 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:42:10,822 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:42:10,822 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:42:10,822 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:42:10,822 - DEBUG - STREAM b'IDAT' 103 4273
2024-04-12 01:42:10,822 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:42:10,822 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:42:10,822 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:42:10,822 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:42:10,822 - DEBUG - STREAM b'IDAT' 103 4273
2024-04-12 01:42:10,822 - DEBUG - STREAM b'tEXt' 4388 37
2024-04-12 01:42:10,823 - DEBUG - STREAM b'tEXt' 4437 37
2024-04-12 01:42:10,823 - DEBUG - STREAM b'tEXt' 4486 40
2024-04-12 01:42:10,823 - DEBUG - STREAM b'tEXt' 4538 12
2024-04-12 01:42:10,823 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:42:16,296 - DEBUG - last_path update: {'path': '/home/bhaswata08/Self Projects/merged/1_5_6_b_7_7_0_d_a_0_c_a_4_d_2_4_9_c_1_9_a_3_5_d_3_f_8_f_d_c_2_2.mov'}
2024-04-12 01:45:21,178 - DEBUG - Closing Client.session
2024-04-12 01:45:21,265 - DEBUG - close.started
2024-04-12 01:45:21,265 - DEBUG - close.complete
2024-04-12 01:45:31,749 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 01:45:31,754 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 01:45:31,755 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 01:45:31,772 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 01:45:31,791 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 01:45:31,835 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073d338910>
2024-04-12 01:45:31,835 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x72073ced4c20> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 01:45:32,084 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073cfb64d0>
2024-04-12 01:45:32,085 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 01:45:32,085 - DEBUG - send_request_headers.complete
2024-04-12 01:45:32,085 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 01:45:32,085 - DEBUG - send_request_body.complete
2024-04-12 01:45:32,085 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 01:45:32,250 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 01:45:33,036 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:45:41,893 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:15:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=OAHG5VZu5ZZRfqmCHo%2BoaMjxfoGl3B%2BrRcTBgYrfn4ShoPesTw764HMS8ks0wM5WLprHswVaPOwP28ISlZgnwwBKA2yw%2BJvXhvidUpxIwVXM0L2x6n%2BM1HblLHmVAyBaIWT5LIvylh17"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872da6318b401dad-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 01:45:41,894 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 01:45:41,894 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 01:45:41,894 - DEBUG - receive_response_body.complete
2024-04-12 01:45:41,894 - DEBUG - response_closed.started
2024-04-12 01:45:41,894 - DEBUG - response_closed.complete
2024-04-12 01:45:41,895 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 01:45:41,902 - DEBUG - Attempting to convert response to list
2024-04-12 01:45:41,902 - DEBUG - Response converted to list: ['man', 'store', 'library']
2024-04-12 01:45:41,902 - DEBUG - Attempting to merge videos
2024-04-12 01:45:42,117 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:45:42,117 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:45:42,117 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:45:42,117 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:45:42,117 - DEBUG - STREAM b'IDAT' 103 2411
2024-04-12 01:45:42,117 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:45:42,117 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:45:42,117 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:45:42,117 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:45:42,117 - DEBUG - STREAM b'IDAT' 103 2411
2024-04-12 01:45:42,117 - DEBUG - STREAM b'tEXt' 2526 37
2024-04-12 01:45:42,117 - DEBUG - STREAM b'tEXt' 2575 37
2024-04-12 01:45:42,117 - DEBUG - STREAM b'tEXt' 2624 40
2024-04-12 01:45:42,117 - DEBUG - STREAM b'tEXt' 2676 9
2024-04-12 01:45:42,117 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:45:42,196 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:45:42,196 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:45:42,196 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:45:42,196 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:45:42,196 - DEBUG - STREAM b'IDAT' 103 4586
2024-04-12 01:45:42,196 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 01:45:42,196 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 01:45:42,196 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 01:45:42,196 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 01:45:42,196 - DEBUG - STREAM b'IDAT' 103 4586
2024-04-12 01:45:42,197 - DEBUG - STREAM b'tEXt' 4701 37
2024-04-12 01:45:42,197 - DEBUG - STREAM b'tEXt' 4750 37
2024-04-12 01:45:42,197 - DEBUG - STREAM b'tEXt' 4799 40
2024-04-12 01:45:42,197 - DEBUG - STREAM b'tEXt' 4851 13
2024-04-12 01:45:42,197 - DEBUG - Error closing: Operation on closed image
2024-04-12 01:45:42,301 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 01:45:46,233 - DEBUG - last_path update: /home/bhaswata08/Self Projects/merged/8_5_c_a_c_a_2_b_1_e_f_f_4_3_d_5_9_3_3_f_7_1_c_c_2_a_3_4_a_2_f_e.mov
2024-04-12 02:03:49,731 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 02:03:49,732 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 02:03:49,760 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:03:49,760 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 02:03:49,783 - DEBUG - Resetting dropped connection: api.smith.langchain.com
2024-04-12 02:03:50,387 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:03:54,808 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073c256110>
2024-04-12 02:03:54,808 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x72073c218050> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 02:03:54,818 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073c256250>
2024-04-12 02:03:54,818 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:03:54,819 - DEBUG - send_request_headers.complete
2024-04-12 02:03:54,819 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:03:54,819 - DEBUG - send_request_body.complete
2024-04-12 02:03:54,819 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:04:01,507 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 20:34:01 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=5d%2BbuuQ3IwAWvxE2XIhE2bTFoeboVtGEdT8P4cuSf4QHsvEYbG0yYQnPXPYzUlCQr0QHwb0xRQwRnH6Ejq9CyQOam0n51RYOntXywJiNtdCD%2F8%2Fzi2i5HaC8V6DXI3eCfa1aeDUAlRwQ"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dc11dfb1c1d99-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:04:01,508 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 02:04:01,508 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:04:01,508 - DEBUG - receive_response_body.complete
2024-04-12 02:04:01,508 - DEBUG - response_closed.started
2024-04-12 02:04:01,509 - DEBUG - response_closed.complete
2024-04-12 02:04:01,509 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 02:04:01,509 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 02:04:01,523 - DEBUG - Retrying due to status code 500
2024-04-12 02:04:01,523 - DEBUG - 1 retry left
2024-04-12 02:04:01,523 - INFO - Retrying request to /chat/completions in 0.905850 seconds
2024-04-12 02:04:02,429 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:04:02,430 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:04:02,431 - DEBUG - send_request_headers.complete
2024-04-12 02:04:02,431 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:04:02,432 - DEBUG - send_request_body.complete
2024-04-12 02:04:02,432 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:04:11,635 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:34:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=qApqbruzNSQCpwou5AWuHCa7v6X%2FHfj2CB5xQcTQNDN%2FR02w%2B%2FVYGrAXYSICijKmRLX1FAXvarn%2FGYPEVDb14fRVp5vIQw6xJ6Iq%2FhM%2Fsv7NcgNCE214P1d%2Bz18O5nZCP2kKzrMTbR2I"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dc14d99431d99-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:04:11,636 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 02:04:11,636 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:04:11,636 - DEBUG - receive_response_body.complete
2024-04-12 02:04:11,636 - DEBUG - response_closed.started
2024-04-12 02:04:11,636 - DEBUG - response_closed.complete
2024-04-12 02:04:11,636 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 02:04:11,641 - DEBUG - Attempting to convert response to list
2024-04-12 02:04:11,641 - DEBUG - Response converted to list: ['sunday', 'white', 'shirt']
2024-04-12 02:04:11,641 - DEBUG - Attempting to merge videos
2024-04-12 02:04:11,900 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:04:11,900 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:04:11,900 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:04:11,900 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:04:11,900 - DEBUG - STREAM b'IDAT' 103 5611
2024-04-12 02:04:11,900 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:04:11,900 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:04:11,900 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:04:11,900 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:04:11,900 - DEBUG - STREAM b'IDAT' 103 5611
2024-04-12 02:04:11,901 - DEBUG - STREAM b'tEXt' 5726 37
2024-04-12 02:04:11,901 - DEBUG - STREAM b'tEXt' 5775 37
2024-04-12 02:04:11,901 - DEBUG - STREAM b'tEXt' 5824 40
2024-04-12 02:04:11,901 - DEBUG - STREAM b'tEXt' 5876 12
2024-04-12 02:04:11,901 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:04:11,989 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:04:11,989 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:04:11,989 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:04:11,989 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:04:11,989 - DEBUG - STREAM b'IDAT' 103 3736
2024-04-12 02:04:11,989 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:04:11,989 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:04:11,989 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:04:11,989 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:04:11,989 - DEBUG - STREAM b'IDAT' 103 3736
2024-04-12 02:04:11,990 - DEBUG - STREAM b'tEXt' 3851 37
2024-04-12 02:04:11,990 - DEBUG - STREAM b'tEXt' 3900 37
2024-04-12 02:04:11,990 - DEBUG - STREAM b'tEXt' 3949 40
2024-04-12 02:04:11,990 - DEBUG - STREAM b'tEXt' 4001 11
2024-04-12 02:04:11,990 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:04:12,083 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:04:12,083 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:04:12,083 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:04:12,083 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:04:12,083 - DEBUG - STREAM b'IDAT' 103 3294
2024-04-12 02:04:12,083 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:04:12,083 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:04:12,083 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:04:12,083 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:04:12,083 - DEBUG - STREAM b'IDAT' 103 3294
2024-04-12 02:04:12,083 - DEBUG - STREAM b'tEXt' 3409 37
2024-04-12 02:04:12,083 - DEBUG - STREAM b'tEXt' 3458 37
2024-04-12 02:04:12,083 - DEBUG - STREAM b'tEXt' 3507 40
2024-04-12 02:04:12,083 - DEBUG - STREAM b'tEXt' 3559 11
2024-04-12 02:04:12,083 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:04:12,267 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:04:21,382 - DEBUG - last_path update: /home/bhaswata08/Self Projects/merged/2_d_0_4_a_a_0_d_a_4_d_b_4_a_0_6_8_c_4_6_4_0_0_8_9_f_2_0_4_f_3_1.mov
2024-04-12 02:06:43,613 - DEBUG - close.started
2024-04-12 02:06:43,613 - DEBUG - close.complete
2024-04-12 02:06:43,635 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 02:06:43,636 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 02:06:43,681 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:06:43,681 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 02:06:43,878 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073d248450>
2024-04-12 02:06:43,879 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x72073c2bcef0> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 02:06:43,890 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073c27ddd0>
2024-04-12 02:06:43,890 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:06:43,891 - DEBUG - send_request_headers.complete
2024-04-12 02:06:43,891 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:06:43,891 - DEBUG - send_request_body.complete
2024-04-12 02:06:43,891 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:06:44,118 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:06:50,059 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 20:36:50 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=lBwlS0MSrUZcdZsHz0MXnidt1VVfAmq9eicPfjG2bYcjrNR9GF4d7x6%2BNWaf9Bd9BheoJGrdX1VoPUt2Y%2FYx7RkAwU9v3eHHEeBfC1B%2F2N4UnV5hlO%2BW77EGDZc21cTPAr9383zKIxNN"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dc53ebde51e08-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:06:50,060 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 02:06:50,060 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:06:50,060 - DEBUG - receive_response_body.complete
2024-04-12 02:06:50,060 - DEBUG - response_closed.started
2024-04-12 02:06:50,060 - DEBUG - response_closed.complete
2024-04-12 02:06:50,060 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 02:06:50,060 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 02:06:50,061 - DEBUG - Retrying due to status code 500
2024-04-12 02:06:50,061 - DEBUG - 1 retry left
2024-04-12 02:06:50,061 - INFO - Retrying request to /chat/completions in 0.913831 seconds
2024-04-12 02:06:50,975 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:06:50,976 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:06:50,977 - DEBUG - send_request_headers.complete
2024-04-12 02:06:50,977 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:06:50,977 - DEBUG - send_request_body.complete
2024-04-12 02:06:50,977 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:06:56,605 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 20:36:56 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=VzLEMdIc%2BoiwZGYRWpNXMD8BtGadYFcY8mO4OlPbaeIJ5d4%2ByjnenlaSmKJyqRfPYbyPhsMXJXsBQMMqnD4RRiNDZISN27JGpbOn%2BpWr%2FxMRhJQN7ABFcc9NyaFxkSJLGuRE7YEI%2BHD%2F"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dc56b0da81e08-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:06:56,606 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 02:06:56,606 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:06:56,606 - DEBUG - receive_response_body.complete
2024-04-12 02:06:56,606 - DEBUG - response_closed.started
2024-04-12 02:06:56,606 - DEBUG - response_closed.complete
2024-04-12 02:06:56,606 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 02:06:56,606 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 02:06:56,607 - DEBUG - Retrying due to status code 500
2024-04-12 02:06:56,607 - DEBUG - 0 retries left
2024-04-12 02:06:56,607 - INFO - Retrying request to /chat/completions in 1.557918 seconds
2024-04-12 02:06:58,165 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:06:58,167 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:06:58,167 - DEBUG - send_request_headers.complete
2024-04-12 02:06:58,167 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:06:58,167 - DEBUG - send_request_body.complete
2024-04-12 02:06:58,168 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:07:04,967 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:37:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=M8Bd8dLWPPvx%2BClDSaNSRpHISsrfUsTHAmhfowQ4%2BefyCyK84kzePsb4sq%2FENoZesVIGb0a5hWywyrf8fv%2BEB0toB5VZOsKyQYW%2FzsJa3j37ml0Wa%2BkrbkcHP%2FTJ%2FNOTBqq5CdD9Ggno"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dc5980cf41e08-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:07:04,967 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 02:07:04,967 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:07:04,968 - DEBUG - receive_response_body.complete
2024-04-12 02:07:04,968 - DEBUG - response_closed.started
2024-04-12 02:07:04,968 - DEBUG - response_closed.complete
2024-04-12 02:07:04,968 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 02:07:04,974 - DEBUG - Attempting to convert response to list
2024-04-12 02:07:04,974 - DEBUG - Response converted to list: ['cat', 'dog']
2024-04-12 02:07:04,974 - DEBUG - Attempting to merge videos
2024-04-12 02:07:05,152 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:07:05,152 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:07:05,152 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:07:05,153 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:07:05,153 - DEBUG - STREAM b'IDAT' 103 2570
2024-04-12 02:07:05,153 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:07:05,153 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:07:05,153 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:07:05,153 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:07:05,153 - DEBUG - STREAM b'IDAT' 103 2570
2024-04-12 02:07:05,153 - DEBUG - STREAM b'tEXt' 2685 37
2024-04-12 02:07:05,153 - DEBUG - STREAM b'tEXt' 2734 37
2024-04-12 02:07:05,153 - DEBUG - STREAM b'tEXt' 2783 40
2024-04-12 02:07:05,153 - DEBUG - STREAM b'tEXt' 2835 9
2024-04-12 02:07:05,153 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:07:05,226 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:07:05,226 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:07:05,226 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:07:05,226 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:07:05,226 - DEBUG - STREAM b'IDAT' 103 3230
2024-04-12 02:07:05,226 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:07:05,226 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:07:05,226 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:07:05,226 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:07:05,226 - DEBUG - STREAM b'IDAT' 103 3230
2024-04-12 02:07:05,226 - DEBUG - STREAM b'tEXt' 3345 37
2024-04-12 02:07:05,226 - DEBUG - STREAM b'tEXt' 3394 37
2024-04-12 02:07:05,226 - DEBUG - STREAM b'tEXt' 3443 40
2024-04-12 02:07:05,226 - DEBUG - STREAM b'tEXt' 3495 9
2024-04-12 02:07:05,227 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:07:05,356 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:07:11,614 - WARNING - /home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/moviepy/video/io/ffmpeg_reader.py:123: UserWarning: Warning: in file /home/bhaswata08/Self Projects/skeleton/dog/MVI_3003.MOV, 6220800 bytes wanted but 0 bytes read,at frame 92/93, at time 3.68/3.68 sec. Using the last valid frame instead.
  warnings.warn("Warning: in file %s, "%(self.filename)+

2024-04-12 02:07:11,764 - DEBUG - last_path update: /home/bhaswata08/Self Projects/merged/8_d_e_7_8_a_a_7_1_0_1_9_4_1_6_2_a_9_2_5_5_5_a_f_7_6_f_2_f_3_5_d.mov
2024-04-12 02:11:14,814 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 02:11:14,815 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 02:11:14,866 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:11:14,867 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 02:11:14,910 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7207403c8450>
2024-04-12 02:11:14,910 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x72073c2bdb50> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 02:11:14,922 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073c288550>
2024-04-12 02:11:14,923 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:11:14,923 - DEBUG - send_request_headers.complete
2024-04-12 02:11:14,923 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:11:14,923 - DEBUG - send_request_body.complete
2024-04-12 02:11:14,923 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:11:15,261 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:11:20,381 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 500, b'Internal Server Error', [(b'Date', b'Thu, 11 Apr 2024 20:41:20 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'159'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=vxqT91du2rqdjpFVsAf2aoEZ4JVAkZ851nMW%2FXILnEDUIyoLAooAeBsBlxXcOJt9KGDleLovyKPysfFY%2ByENtDuffJePlyiQtSH8B4uuUKmvX6jkDM3F%2FdgQgQs6OaEgvBDUxQ4kkHKr"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dcbdcbece1da9-BLR'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:11:20,381 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 500 Internal Server Error"
2024-04-12 02:11:20,381 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:11:20,382 - DEBUG - receive_response_body.complete
2024-04-12 02:11:20,382 - DEBUG - response_closed.started
2024-04-12 02:11:20,382 - DEBUG - response_closed.complete
2024-04-12 02:11:20,382 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "500 Internal Server Error"
2024-04-12 02:11:20,382 - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/openai/_base_client.py", line 967, in _request
    response.raise_for_status()
  File "/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/httpx/_models.py", line 758, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '500 Internal Server Error' for url 'https://zukijourney.xyzbot.net/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
2024-04-12 02:11:20,382 - DEBUG - Retrying due to status code 500
2024-04-12 02:11:20,382 - DEBUG - 1 retry left
2024-04-12 02:11:20,382 - INFO - Retrying request to /chat/completions in 0.879218 seconds
2024-04-12 02:11:21,262 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:11:21,263 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:11:21,263 - DEBUG - send_request_headers.complete
2024-04-12 02:11:21,264 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:11:21,264 - DEBUG - send_request_body.complete
2024-04-12 02:11:21,264 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:11:30,930 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:41:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=Wq24UBW9yRDcC0dpnrEdEgYagE3Xtt9NrVwaclbFawHKwOkwUpJnEZEdZFOBLJXMuRdpopUs%2Bvz93BCC%2FODN%2FGU2g%2FkzGL9BS%2BpqXBahRMELjaW2UqTTwDL9UZwYQGKYhpc6Mrhorn%2BI"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dcc048c191da9-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:11:30,930 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 02:11:30,930 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:11:30,931 - DEBUG - receive_response_body.complete
2024-04-12 02:11:30,931 - DEBUG - response_closed.started
2024-04-12 02:11:30,931 - DEBUG - response_closed.complete
2024-04-12 02:11:30,931 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 02:11:30,936 - DEBUG - Attempting to convert response to list
2024-04-12 02:11:30,937 - DEBUG - Response converted to list: ['good morning', 'how are you']
2024-04-12 02:11:30,937 - DEBUG - Attempting to merge videos
2024-04-12 02:11:31,125 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:11:31,125 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:11:31,125 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:11:31,125 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:11:31,125 - DEBUG - STREAM b'IDAT' 103 6343
2024-04-12 02:11:31,125 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:11:31,125 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:11:31,125 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:11:31,125 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:11:31,125 - DEBUG - STREAM b'IDAT' 103 6343
2024-04-12 02:11:31,126 - DEBUG - STREAM b'tEXt' 6458 37
2024-04-12 02:11:31,126 - DEBUG - STREAM b'tEXt' 6507 37
2024-04-12 02:11:31,126 - DEBUG - STREAM b'tEXt' 6556 40
2024-04-12 02:11:31,126 - DEBUG - STREAM b'tEXt' 6608 18
2024-04-12 02:11:31,126 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:11:31,211 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:11:31,211 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:11:31,211 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:11:31,211 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:11:31,211 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 02:11:31,211 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:11:31,211 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:11:31,211 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:11:31,211 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:11:31,211 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 02:11:31,212 - DEBUG - STREAM b'tEXt' 7512 37
2024-04-12 02:11:31,212 - DEBUG - STREAM b'tEXt' 7561 37
2024-04-12 02:11:31,212 - DEBUG - STREAM b'tEXt' 7610 40
2024-04-12 02:11:31,212 - DEBUG - STREAM b'tEXt' 7662 17
2024-04-12 02:11:31,212 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:11:31,316 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:11:36,793 - DEBUG - last_path update: /home/bhaswata08/Self Projects/merged/7_9_b_2_9_c_3_5_7_3_6_2_4_9_c_f_8_8_2_8_4_f_9_d_0_b_9_a_9_c_c_1.mov
2024-04-12 02:15:20,438 - DEBUG - Starting new HTTPS connection (1): api.smith.langchain.com:443
2024-04-12 02:15:20,444 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 02:15:20,445 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 02:15:20,463 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:15:20,469 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 02:15:20,509 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7032468b5710>
2024-04-12 02:15:20,509 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x703246704830> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 02:15:20,520 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x70324687b010>
2024-04-12 02:15:20,520 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:15:20,520 - DEBUG - send_request_headers.complete
2024-04-12 02:15:20,520 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:15:20,520 - DEBUG - send_request_body.complete
2024-04-12 02:15:20,520 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:15:20,980 - DEBUG - https://api.smith.langchain.com:443 "GET /info HTTP/1.1" 200 209
2024-04-12 02:15:21,397 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:15:31,468 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:45:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=FQsCjPY6sD77uvJLJsC4Na2uhZqUtDkjlDPJ6dVFNHHXMYdJlSgi9lviFBLE5N88LyIMR81DDimfHZrVkX0J3LaBJAeau%2FeGw%2Bt7KZ3cFlw9n6Jz4rL7HPBa95FAnH9j2y4ZLZpqEgUW"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dd1dbcbdd1d35-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:15:31,468 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 02:15:31,468 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:15:31,468 - DEBUG - receive_response_body.complete
2024-04-12 02:15:31,468 - DEBUG - response_closed.started
2024-04-12 02:15:31,469 - DEBUG - response_closed.complete
2024-04-12 02:15:31,469 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 02:15:31,474 - DEBUG - Attempting to convert response to list
2024-04-12 02:15:31,474 - DEBUG - Response converted to list: ['dog', 'bicycle', 'park']
2024-04-12 02:15:31,474 - DEBUG - Attempting to merge videos
2024-04-12 02:15:31,776 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:15:31,776 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:15:31,776 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:15:31,776 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:15:31,776 - DEBUG - STREAM b'IDAT' 103 3230
2024-04-12 02:15:31,776 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:15:31,776 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:15:31,776 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:15:31,776 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:15:31,776 - DEBUG - STREAM b'IDAT' 103 3230
2024-04-12 02:15:31,777 - DEBUG - STREAM b'tEXt' 3345 37
2024-04-12 02:15:31,777 - DEBUG - STREAM b'tEXt' 3394 37
2024-04-12 02:15:31,777 - DEBUG - STREAM b'tEXt' 3443 40
2024-04-12 02:15:31,777 - DEBUG - STREAM b'tEXt' 3495 9
2024-04-12 02:15:31,777 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:15:31,857 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:15:31,857 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:15:31,857 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:15:31,857 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:15:31,857 - DEBUG - STREAM b'IDAT' 103 4894
2024-04-12 02:15:31,857 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:15:31,857 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:15:31,857 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:15:31,857 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:15:31,857 - DEBUG - STREAM b'IDAT' 103 4894
2024-04-12 02:15:31,857 - DEBUG - STREAM b'tEXt' 5009 37
2024-04-12 02:15:31,857 - DEBUG - STREAM b'tEXt' 5058 37
2024-04-12 02:15:31,857 - DEBUG - STREAM b'tEXt' 5107 40
2024-04-12 02:15:31,857 - DEBUG - STREAM b'tEXt' 5159 13
2024-04-12 02:15:31,858 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:15:31,877 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:15:31,934 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:15:31,934 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:15:31,934 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:15:31,934 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:15:31,934 - DEBUG - STREAM b'IDAT' 103 3747
2024-04-12 02:15:31,934 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:15:31,934 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:15:31,934 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:15:31,934 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:15:31,934 - DEBUG - STREAM b'IDAT' 103 3747
2024-04-12 02:15:31,935 - DEBUG - STREAM b'tEXt' 3862 37
2024-04-12 02:15:31,935 - DEBUG - STREAM b'tEXt' 3911 37
2024-04-12 02:15:31,935 - DEBUG - STREAM b'tEXt' 3960 40
2024-04-12 02:15:31,935 - DEBUG - STREAM b'tEXt' 4012 10
2024-04-12 02:15:31,935 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:15:36,049 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 02:15:36,050 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 02:15:36,100 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:15:36,101 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 02:15:36,534 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:15:38,386 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073d996e50>
2024-04-12 02:15:38,386 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x72073c2bdc70> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 02:15:38,397 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073cdd04d0>
2024-04-12 02:15:38,397 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:15:38,398 - DEBUG - send_request_headers.complete
2024-04-12 02:15:38,398 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:15:38,398 - DEBUG - send_request_body.complete
2024-04-12 02:15:38,398 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:15:38,542 - WARNING - /home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/moviepy/video/io/ffmpeg_reader.py:123: UserWarning: Warning: in file /home/bhaswata08/Self Projects/skeleton/park/MVI_3629.MOV, 6220800 bytes wanted but 0 bytes read,at frame 47/48, at time 1.88/1.88 sec. Using the last valid frame instead.
  warnings.warn("Warning: in file %s, "%(self.filename)+

2024-04-12 02:15:52,659 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:45:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=V5zKb0xshI6jHxhj5Itko%2FFKcuYO1ISqo9wnPvct7bVFc%2BoTnLlgXMrFIq5Du%2BIPZfyeBXa8aKLzfWHdZ8jpi%2FenZI4wRbn7O1%2BnjECBWqF%2F4PHPhDsb2%2BhG8XDblLMAH8oL8k%2BIVuP2"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dd24b88d826b9-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:15:52,660 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 02:15:52,660 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:15:52,661 - DEBUG - receive_response_body.complete
2024-04-12 02:15:52,661 - DEBUG - response_closed.started
2024-04-12 02:15:52,661 - DEBUG - response_closed.complete
2024-04-12 02:15:52,661 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 02:15:53,193 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:16:26,869 - DEBUG - close.started
2024-04-12 02:16:26,870 - DEBUG - close.complete
2024-04-12 02:16:26,870 - DEBUG - close.started
2024-04-12 02:16:26,870 - DEBUG - close.complete
2024-04-12 02:16:26,870 - DEBUG - close.started
2024-04-12 02:16:26,870 - DEBUG - close.complete
2024-04-12 02:16:26,876 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-04-12 02:16:26,877 - DEBUG - load_verify_locations cafile='/home/bhaswata08/.conda/envs/llm/lib/python3.11/site-packages/certifi/cacert.pem'
2024-04-12 02:16:26,898 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'user', 'content': '<instructions>\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\n    Do not output anything other than the text blobs in json schema.\n\n    1. Only output in the specified format without any preamble or extra information.\n    2. The categories must be only and only from the given categories.\n    3. The categories must be in lowercase.\n    4. Cross verify your results\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \n    8. Do not hallucinate up categories, use categories from the list available.\n    </instructions>\n\n    <examples>\n    query = "The doctor signed the letter."\n    Your response: ["doctor", "sign", "letter"]\n    query = "Hi, How are you doing"\n    Your response: ["how are you"]\n    query = "I\'ll call you tomorrow after work."\n    Your response: ["cell phone", "tomorrow"]\n    </examples>\n\n    <format instructions>\n    \nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\n\nHere is the output schema:\n```\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\n```\n    </format instructions>\n    <user query>\n    \ninput_variables=[\'query\'] partial_variables={\'format_instructions\': \'The output should be formatted as a JSON instance that conforms to the JSON schema below.\\n\\nAs an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}\\nthe object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.\\n\\nHere is the output schema:\\n```\\n{"properties": {"blob": {"title": "Blob", "type": "array", "items": {"enum": ["dry", "parent", "sign", "hard", "screen", "page", "exercise", "healthy", "doctor", "bedroom", "window", "letter", "narrow", "small little", "university", "brown", "ball", "evening", "race (ethnicity)", "colour", "war", "beautiful", "hospital", "low", "train", "book", "loud", "priest", "sunday", "pink", "skirt", "summer", "clock", "he", "sister", "year", "adult", "crowd", "month", "student", "school", "lamp", "president", "long", "car", "dirty", "peace", "bill", "suit", "fan", "author", "boat", "we", "box", "rich", "alright", "soldier", "female", "technology", "radio", "afternoon", "bag", "tomorrow", "pant", "slow", "warm", "player", "energy", "marriage", "father", "black", "old", "shallow", "yesterday", "patient", "court", "secretary", "cell phone", "baby", "computer", "t-shirt", "cat", "soft", "mother", "medicine", "green", "girl", "good evening", "monday", "sad", "today", "light", "cold", "soap", "high", "hot", "bad", "heavy", "pleased", "tool", "orange", "fall", "happy", "tight", "it", "animal", "week", "night", "hello", "child", "religion", "chair", "wednesday", "son", "blue", "bird", "truck", "ugly", "paint", "loose", "they", "hour", "alive", "neighbour", "reporter", "young", "mean", "deep", "paper", "waiter", "teacher", "laptop", "god", "sick", "good morning", "lock", "gun", "bank", "photograph", "minute", "price", "brother", "male", "daughter", "job", "deaf", "door", "telephone", "short", "king", "ring", "pencil", "pen", "city", "kitchen", "bathroom", "india", "train ticket", "bed", "how are you", "dog", "actor", "fast", "artist", "time", "tuesday", "weak", "horse", "red", "dress", "transportation", "bicycle", "you", "strong", "dream", "mouse", "husband", "thursday", "winter", "thick", "good afternoon", "park", "key", "woman", "sport", "police", "market", "flat", "cow", "street or road", "restaurant", "grey", "dead", "boy", "family", "cheap", "card", "white", "season", "monsoon", "team", "newspaper", "grandmother", "queen", "good night", "thank you", "money", "cool", "spring", "office", "clean", "hat", "second", "science", "clothing", "expensive", "grandfather", "plane", "table", "friday", "election", "i", "television", "wet", "friend", "wife", "she", "shirt", "lawyer", "famous", "death", "blind", "gift", "yellow", "curved", "train station", "big large", "poor", "pocket", "ground", "man", "temple", "saturday", "tall", "location", "manager", "nice", "house", "attack", "library", "wide", "store", "quiet", "camera", "bus", "fish", "shoes", "morning", "thin", "good", "new"], "type": "string"}}, "cot_reason": {"title": "Cot Reason", "description": "Step by step breakdown of your reason for the blob output", "type": "string"}, "cross_verification": {"title": "Cross Verification", "description": "Have you Double checked your output, and crossverifed if it matches the output schema?", "type": "boolean"}}, "required": ["blob", "cot_reason", "cross_verification"]}\\n```\'} template=\'<instructions>\\n    You are an expert sign language translator, Based on the user query, your task is to divide the user query into blobs of text.\\n    Do not output anything other than the text blobs in json schema.\\n\\n    1. Only output in the specified format without any preamble or extra information.\\n    2. The categories must be only and only from the given categories.\\n    3. The categories must be in lowercase.\\n    4. Cross verify your results\\n    5. It is okay if the sentence doesnt have some words, you can skip out in your response\\n    6. I will give you $1000 for the correct output and fine you $4000 for the wrong output.\\n    7. Strictly adhere to the standards for formatting, dont output "Here is the given json schema, <json schema>" \\n    8. Do not hallucinate up categories, use categories from the list available.\\n    </instructions>\\n\\n    <examples>\\n    query = "The doctor signed the letter."\\n    Your response: ["doctor", "sign", "letter"]\\n    query = "Hi, How are you doing"\\n    Your response: ["how are you"]\\n    query = "I\\\'ll call you tomorrow after work."\\n    Your response: ["cell phone", "tomorrow"]\\n    </examples>\\n\\n    <format instructions>\\n    \\n{format_instructions}\\n    </format instructions>\\n    <user query>\\n    \\n{query}\\n\\n    </user query>\\n    \'\n\n    </user query>\n    '}], 'model': 'claude-3-opus', 'stream': False}}
2024-04-12 02:16:26,899 - DEBUG - connect_tcp.started host='zukijourney.xyzbot.net' port=443 local_address=None timeout=5.0 socket_options=None
2024-04-12 02:16:26,943 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073d98bed0>
2024-04-12 02:16:26,944 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x72073c2bdc70> server_hostname='zukijourney.xyzbot.net' timeout=5.0
2024-04-12 02:16:26,955 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x72073c2dba50>
2024-04-12 02:16:26,955 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-04-12 02:16:26,955 - DEBUG - send_request_headers.complete
2024-04-12 02:16:26,955 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-04-12 02:16:26,955 - DEBUG - send_request_body.complete
2024-04-12 02:16:26,955 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-04-12 02:16:27,376 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:16:35,553 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Thu, 11 Apr 2024 20:46:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Report-To', b'{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=A22afADDID4X8nFso2oX9AQNLSoHPZHExhWH4MPiDVrPfgi0iwN9j%2BFuGkVHV%2Fy%2FrDDnW4yEOIXWDXZ3pb2MrJXzrJMwmLIWC6CcKz3k1fqQYu%2B5HBzB9DkXJKDem9KIhOOsNl9eHEZC"}],"group":"cf-nel","max_age":604800}'), (b'NEL', b'{"success_fraction":0,"report_to":"cf-nel","max_age":604800}'), (b'Server', b'cloudflare'), (b'CF-RAY', b'872dd37afd6f1da9-BLR'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-04-12 02:16:35,554 - INFO - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "HTTP/1.1 200 OK"
2024-04-12 02:16:35,554 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-04-12 02:16:35,555 - DEBUG - receive_response_body.complete
2024-04-12 02:16:35,555 - DEBUG - response_closed.started
2024-04-12 02:16:35,555 - DEBUG - response_closed.complete
2024-04-12 02:16:35,555 - DEBUG - HTTP Request: POST https://zukijourney.xyzbot.net/v1/chat/completions "200 OK"
2024-04-12 02:16:35,565 - DEBUG - Attempting to convert response to list
2024-04-12 02:16:35,565 - DEBUG - Response converted to list: ['how are you', 'today']
2024-04-12 02:16:35,565 - DEBUG - Attempting to merge videos
2024-04-12 02:16:35,797 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:16:35,797 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:16:35,798 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:16:35,798 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:16:35,798 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 02:16:35,798 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:16:35,798 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:16:35,798 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:16:35,798 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:16:35,798 - DEBUG - STREAM b'IDAT' 103 7397
2024-04-12 02:16:35,798 - DEBUG - STREAM b'tEXt' 7512 37
2024-04-12 02:16:35,798 - DEBUG - STREAM b'tEXt' 7561 37
2024-04-12 02:16:35,798 - DEBUG - STREAM b'tEXt' 7610 40
2024-04-12 02:16:35,798 - DEBUG - STREAM b'tEXt' 7662 17
2024-04-12 02:16:35,799 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:16:35,895 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:16:35,895 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:16:35,895 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:16:35,895 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:16:35,895 - DEBUG - STREAM b'IDAT' 103 4749
2024-04-12 02:16:35,895 - DEBUG - STREAM b'IHDR' 16 13
2024-04-12 02:16:35,895 - DEBUG - STREAM b'cHRM' 41 32
2024-04-12 02:16:35,895 - DEBUG - STREAM b'bKGD' 85 6
2024-04-12 02:16:35,895 - DEBUG - b'bKGD' 85 6 (unknown)
2024-04-12 02:16:35,895 - DEBUG - STREAM b'IDAT' 103 4749
2024-04-12 02:16:35,896 - DEBUG - STREAM b'tEXt' 4864 37
2024-04-12 02:16:35,896 - DEBUG - STREAM b'tEXt' 4913 37
2024-04-12 02:16:35,896 - DEBUG - STREAM b'tEXt' 4962 40
2024-04-12 02:16:35,896 - DEBUG - STREAM b'tEXt' 5014 11
2024-04-12 02:16:35,896 - DEBUG - Error closing: Operation on closed image
2024-04-12 02:16:35,972 - DEBUG - https://api.smith.langchain.com:443 "POST /runs/batch HTTP/1.1" 202 33
2024-04-12 02:16:41,385 - DEBUG - last_path update: /home/bhaswata08/Self Projects/merged/b_a_e_b_f_a_5_9_c_9_e_4_4_7_3_3_b_7_7_3_0_4_b_1_2_3_4_1_3_9_6_b.mov
2024-04-12 04:08:35,855 - DEBUG - Closing Client.session
2024-04-12 04:08:35,855 - DEBUG - Closing Client.session
2024-04-12 04:08:36,617 - DEBUG - close.started
2024-04-12 04:08:36,618 - DEBUG - close.complete
2024-04-12 04:08:36,623 - DEBUG - close.started
2024-04-12 04:08:36,623 - DEBUG - close.complete
2024-04-12 04:08:36,624 - DEBUG - close.started
2024-04-12 04:08:36,624 - DEBUG - close.complete
